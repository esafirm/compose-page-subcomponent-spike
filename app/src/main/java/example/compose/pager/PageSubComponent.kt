package example.compose.pager

import androidx.activity.ComponentActivity
import androidx.activity.result.ActivityResultCaller
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleOwner
import androidx.lifecycle.coroutineScope
import com.squareup.anvil.annotations.ContributesTo
import com.squareup.anvil.annotations.MergeSubcomponent
import dagger.Binds
import dagger.BindsInstance
import dagger.Module
import dagger.Provides
import dagger.Reusable
import dagger.Subcomponent
import dagger.multibindings.ClassKey
import dagger.multibindings.IntoMap
import example.compose.AppScope
import kotlinx.coroutines.CoroutineScope

interface PageScope

@ContributesTo(AppScope::class)
interface PageVmProviderStoreProvider {
    fun pageVmProviderStore(): PageVmProviderStore
}

typealias PageVmProviderStore = Map<@JvmSuppressWildcards Class<*>, @JvmSuppressWildcards PageVmProvider.Factory>


interface PageVmProvider<VM : Any> {

    fun getPageVm(): VM

    interface Factory {
        fun create(
            @BindsInstance idProvider: ResultCallerIdProvider,
            @BindsInstance registry: ResultLauncherRegistry,
            @BindsInstance lifecycleOwner: LifecycleOwner,
        ): PageVmProvider<*>
    }
}

@Module
class DefaultPageDependencies {

    @Provides
    fun provideLifecycle(lifecycleOwner: LifecycleOwner): Lifecycle {
        return lifecycleOwner.lifecycle
    }

    @Provides
    fun provideLifecycleScope(lifecycleOwner: LifecycleOwner): CoroutineScope {
        return lifecycleOwner.lifecycle.coroutineScope
    }

    @Reusable
    @Provides
    fun provideActivityResultCaller(
        activity: ComponentActivity,
        idProvider: ResultCallerIdProvider,
        registry: ResultLauncherRegistry,
    ): ActivityResultCaller {
        return ComposePageActivityResultCaller(
            activity.activityResultRegistry,
            idProvider,
            registry
        )
    }
}

/* --------------------------------------------------- */
/* > Impl -- This can be generated by anvil extension */
/* --------------------------------------------------- */

@MergeSubcomponent(
    scope = GreetingPage::class,
    modules = [DefaultPageDependencies::class]
)
interface GreetingPageSubComponent : PageVmProvider<GreetingViewModel> {

    @Subcomponent.Factory
    interface Factory : PageVmProvider.Factory
}


@ContributesTo(AppScope::class)
@Module(subcomponents = [GreetingPageSubComponent::class])
interface GreetingPageComponentBinder {
    @IntoMap
    @Binds
    @ClassKey(GreetingPage::class)
    fun bindAnotherPageInjectorBinder(impl: GreetingPageSubComponent.Factory):
            PageVmProvider.Factory
}